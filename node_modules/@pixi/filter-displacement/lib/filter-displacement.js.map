{"version":3,"file":"filter-displacement.js","sources":["../src/DisplacementFilter.js"],"sourcesContent":["import { Filter } from '@pixi/core';\nimport { Matrix, Point } from '@pixi/math';\nimport vertex from './displacement.vert';\nimport fragment from './displacement.frag';\n\n/**\n * The DisplacementFilter class uses the pixel values from the specified texture\n * (called the displacement map) to perform a displacement of an object.\n *\n * You can use this filter to apply all manor of crazy warping effects.\n * Currently the `r` property of the texture is used to offset the `x`\n * and the `g` property of the texture is used to offset the `y`.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport default class DisplacementFilter extends Filter\n{\n    /**\n     * @param {PIXI.Sprite} sprite - The sprite used for the displacement map. (make sure its added to the scene!)\n     * @param {number} [scale] - The scale of the displacement\n     */\n    constructor(sprite, scale)\n    {\n        const maskMatrix = new Matrix();\n\n        sprite.renderable = false;\n\n        super(vertex, fragment, {\n            mapSampler: sprite._texture,\n            filterMatrix: maskMatrix,\n            scale: { x: 1, y: 1 },\n        });\n\n        this.maskSprite = sprite;\n        this.maskMatrix = maskMatrix;\n\n        if (scale === null || scale === undefined)\n        {\n            scale = 20;\n        }\n\n        /**\n         * scaleX, scaleY for displacements\n         * @member {PIXI.Point}\n         */\n        this.scale = new Point(scale, scale);\n    }\n\n    /**\n     * Applies the filter.\n     *\n     * @param {PIXI.systems.FilterSystem} filterManager - The manager.\n     * @param {PIXI.RenderTexture} input - The input target.\n     * @param {PIXI.RenderTexture} output - The output target.\n     */\n    apply(filterManager, input, output)\n    {\n        this.uniforms.filterMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, this.maskSprite);\n        this.uniforms.scale.x = this.scale.x;\n        this.uniforms.scale.y = this.scale.y;\n\n        // draw the filter...\n        filterManager.applyFilter(this, input, output);\n    }\n\n    /**\n     * The texture used for the displacement map. Must be power of 2 sized texture.\n     *\n     * @member {PIXI.Texture}\n     */\n    get map()\n    {\n        return this.uniforms.mapSampler;\n    }\n\n    set map(value) // eslint-disable-line require-jsdoc\n    {\n        this.uniforms.mapSampler = value;\n    }\n}\n"],"names":["const","Matrix","super","Point","Filter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,IAAqB,kBAAkB;IAMnC,2BAAW,CAAC,MAAM,EAAE,KAAK;IACzB;QACIA,IAAM,UAAU,GAAG,IAAIC,WAAM,EAAE,CAAC;;QAEhC,MAAM,CAAC,UAAU,GAAG,KAAK,CAAC;;QAE1BC,WAAK,OAAC,MAAM,EAAE,QAAQ,EAAE;YACpB,UAAU,EAAE,MAAM,CAAC,QAAQ;YAC3B,YAAY,EAAE,UAAU;YACxB,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;SACxB,CAAC,CAAC;;QAEH,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;QACzB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;;QAE7B,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS;QACzC;YACI,KAAK,GAAG,EAAE,CAAC;SACd;;;;;;QAMD,IAAI,CAAC,KAAK,GAAG,IAAIC,UAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;;;;;;;6DACxC;;;;;;;;;iCASD,wBAAM,aAAa,EAAE,KAAK,EAAE,MAAM;IAClC;QACI,IAAI,CAAC,QAAQ,CAAC,YAAY,GAAG,aAAa,CAAC,qBAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACnG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;;;QAGrC,aAAa,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;MAClD;;;;;;;IAOD,mBAAI;IACJ;QACI,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;MACnC;;IAED,mBAAI,oBAAI,KAAK;IACb;QACI,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAC;KACpC;;;;;EA/D2CC;;;;"}